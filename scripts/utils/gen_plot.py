# gen_plot.py - generate running scripts for (re-)plotting ROC or PRC figures.


import getopt
import os
import sys
from gen_conf import VERSION


class Config:
    def __init__(self):
        self.sid = None         
        self.sid_full = None   # sample full ID
        self.cnv_scale = None  
        self.metric = None

        self.dat_list_dir = None
        self.repo_scripts_dir = None
        self.out_dir = None

        self.plot_dec = None
        self.xy_gain = None
        self.xy_loss = None
        self.xy_loh = None


    def check_args(self):
        assert_n(self.sid)
        assert_n(self.sid_full)
        assert_n(self.cnv_scale)
        if self.cnv_scale not in ("gene", "arm"):
            raise ValueError
        assert_n(self.metric)
        if self.metric not in ("ROC", "PRC"):
            raise ValueError

        assert_n(self.out_dir)
        if not os.path.exists(self.out_dir):
            os.mkdir(self.out_dir)

        assert_e(self.dat_list_dir)
        assert_e(self.repo_scripts_dir)

        if not self.plot_dec:
            self.plot_dec = CONF_PLOT_DEC

        assert_n(self.xy_gain)
        assert_n(self.xy_loss)
        assert_n(self.xy_loh)


def assert_e(path):
    if path is None or not os.path.exists(path):
        raise OSError


def assert_n(var):
    if var is None or not var:
        raise ValueError


def __parse_xy(xy):
    try:
        x, y = xy.split(",")
        x, y = float(x), float(y)
    except:
        raise ValueError
    return (x, y)


def __get_script_prefix(conf):
    metric = conf.metric.lower()
    return "%s.%s_scale.%s.plot" % (conf.sid, conf.cnv_scale, metric)


def __get_roc_data(conf, cnv_type):
    dat_fn = os.path.join(conf.dat_list_dir, cnv_type, "result/s5_roc", 
        "%s.%s.%s_scale.roc.pre_plot_dat_list.list.rds" % (
        conf.sid, cnv_type, conf.cnv_scale))
    assert_e(dat_fn)
    return(dat_fn)


def __get_prc_data(conf, cnv_type):
    dat_fn = os.path.join(conf.dat_list_dir, cnv_type, "result/s6_prc", 
        "%s.%s.%s_scale.prc.pre_plot_dat_list.list.rds" % (
        conf.sid, cnv_type, conf.cnv_scale))
    assert_e(dat_fn)
    return(dat_fn)


def __format_cnv_type(cnv_type):
    if cnv_type == "copy_gain":
        return("Copy Gain")
    elif cnv_type == "copy_loss":
        return("Copy Loss")
    elif cnv_type == "loh":
        return("LOH")
    else:
        raise ValueError


def generate_r(fn, conf):
    cnv_scale = conf.cnv_scale
    metric = "roc" if conf.metric == "ROC" else "prc"

    s  = '''# This file was generated by "%s (v%s)."
# %s.R - plot ROC or PRC figures.

library(dplyr)
library(ggplot2)
library(stringr)

args <- commandArgs(trailingOnly = TRUE)
work_dir <- args[1]
setwd(work_dir)

source("benchmark.R")
source("utils.R")
''' % (APP, VERSION, __get_script_prefix(conf))

    s += '''
re_plot <- function(
  dat_list_fn, out_prefix, 
  plot_title, plot_dec = %d, legend_xmin = %f, legend_ymin = %f) 
{
  dat_list <- readRDS(dat_list_fn)

  p <- plot_%s(
    dat_list, dec = plot_dec, title = plot_title,
    legend_xmin = legend_xmin, legend_ymin = legend_ymin, 
    method_sub_case = "canonical") 

  plot_fn <- sprintf("%%s.plot.%s_figure.jpg", out_prefix)
  ggplot2::ggsave(plot_fn, p, width = 6.5, height = 5,
                  units = "cm", dpi = 600)
}
''' % (CONF_PLOT_DEC, CONF_LEGEND_XMIN, CONF_LEGEND_YMIN,
       metric, metric)

    for cnv_type, xy in zip(("copy_gain", "copy_loss", "loh"),
        (conf.xy_gain, conf.xy_loss, conf.xy_loh)):
        dat_list_fn = __get_roc_data(conf, cnv_type) if metric == "roc" else  \
            __get_prc_data(conf, cnv_type)
        out_prefix = "%s.%s.%s_scale" % (conf.sid, cnv_type, cnv_scale)
        plot_title = "%s %s Curve for %s" % (
            conf.sid_full, metric.upper(), __format_cnv_type(cnv_type))
        x, y = __parse_xy(xy)
        s += '''
re_plot(
  dat_list_fn = "%s",
  out_prefix = "%s",
  plot_title = "%s",
  plot_dec = %d,
  legend_xmin = %f,
  legend_ymin = %f
)  
''' % (dat_list_fn, out_prefix, plot_title, conf.plot_dec, x, y)

    s += '''
print("All Done!")

'''

    with open(fn, "w") as fp:
        fp.write(s)


def generate_qsub(fn, conf, r_script):
    cnv_scale = conf.cnv_scale
    metric = conf.metric.lower()
    prefix = "%s_%s_%s" % (cnv_scale, metric, conf.sid)

    s  = '''#!/bin/bash
# This file was generated by "%s (v%s)."
''' % (APP, VERSION)

    s += '''#PBS -N %s
#PBS -q cgsd
#PBS -l nodes=1:ppn=2,mem=20g,walltime=1:00:00
#PBS -o %s.out
#PBS -e %s.err
''' % (prefix, prefix, prefix)

    s += '''
source ~/.bashrc
conda activate XCLBM

# run `set` after `source` & `conda activate` as the source file has an unbound variable
set -eux

work_dir=`cd $(dirname $0) && pwd`
if [ -n "$PBS_O_WORKDIR" ]; then
    work_dir=$PBS_O_WORKDIR
fi
'''

    s += '''
scripts_dir=%s
cp  $scripts_dir/evaluate/benchmark.R  $work_dir
cp  $scripts_dir/evaluate/utils.R  $work_dir
''' % (conf.repo_scripts_dir, )

    s += '''
Rscript  $work_dir/%s  $work_dir
''' % (r_script, )
    
    s += '''
set +ux
conda deactivate
echo "All Done!"

'''

    with open(fn, "w") as fp:
        fp.write(s)


def usage(fp = sys.stderr):
    s =  "\n" 
    s += "Version: %s\n" % (VERSION, )
    s += "Usage: %s <options>\n" % (APP, )  
    s += "\n" 
    s += "Options:\n"
    s += "  --sid STR              Sample ID.\n"
    s += "  --sidFull STR          Sample Full ID.\n"
    s += "  --cnvScale STR         CNV scale, gene or arm.\n"
    s += "  --datList DIR          Dir containing previous data list.\n"
    s += "  --metric STR           Metric, ROC or PRC.\n"
    s += "  --outdir DIR           Output dir.\n"
    s += "  --repoScripts DIR      Repo scripts dir.\n"
    s += "  --plotDec INT          Decimal in plots [%d]\n" % CONF_PLOT_DEC
    s += "  --xyGain STR           Legend position for copy gain: xmin,ymin.\n"
    s += "  --xyLoss STR           Legend position for copy loss: xmin,ymin.\n"
    s += "  --xyLOH STR            Legend position for LOH: xmin,ymin.\n"
    s += "  --version              Print version and exit.\n"
    s += "  --help                 Print this message and exit.\n"
    s += "\n"

    fp.write(s)


def main():
    func = "main"

    if len(sys.argv) <= 1:
        usage(sys.stderr)
        sys.exit(1)

    conf = Config()
    opts, args = getopt.getopt(sys.argv[1:], "", [
        "sid=", "sidFull=", "cnvScale=",
        "datList=",
        "metric=",
        "outdir=",
        "repoScripts=",
        "plotDec=",
        "xyGain=", "xyLoss=", "xyLOH=",
        "version", "help"
    ])

    for op, val in opts:
        if len(op) > 2:
            op = op.lower()
        if op in   ("--sid"): conf.sid = val
        elif op in ("--sidfull"): conf.sid_full = val
        elif op in ("--cnvscale"): conf.cnv_scale = val
        elif op in ("--datlist"): conf.dat_list_dir = val
        elif op in ("--metric"): conf.metric = val
        elif op in ("--outdir"): conf.out_dir = val
        elif op in ("--reposcripts"): conf.repo_scripts_dir = val
        elif op in ("--plotdec"): conf.plot_dec = int(val)
        elif op in ("--xygain"): conf.xy_gain = val
        elif op in ("--xyloss"): conf.xy_loss = val
        elif op in ("--xyloh"): conf.xy_loh = val
        elif op in ("--version"): sys.stderr.write("%s\n" % VERSION); sys.exit(1)
        elif op in ("--help"): usage(); sys.exit(1)
        else:
            sys.stderr.write("[E::%s] invalid option: '%s'.\n" % (func, op))
            return(-1)    

    conf.check_args()

    # generate R scripts
    r_script = "%s.R" % __get_script_prefix(conf)
    r_script_path = os.path.join(conf.out_dir, r_script)
    generate_r(r_script_path, conf)
    print("R scripts: %s\n" % str(r_script_path))

    # generate qsub scripts
    qsub_script = "%s.qsub.sh" % __get_script_prefix(conf)
    qsub_script_path = os.path.join(conf.out_dir, qsub_script)
    generate_qsub(qsub_script_path, conf, r_script)
    print("qsub scripts: %s\n" % str(qsub_script_path))

    sys.stdout.write("[I::%s] All Done!\n" % func)


APP = "gen_plot.py"

CONF_PLOT_DEC = 3
CONF_LEGEND_XMIN = 0.7
CONF_LEGEND_YMIN = 0.25


if __name__ == "__main__":
    main()

